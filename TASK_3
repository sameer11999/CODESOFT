#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Task {
    std::string description;
    bool completed;
};

class TodoList {
private:
    std::vector<Task> tasks;

public:
    void addTask(const std::string& description) {
        Task newTask;
        newTask.description = description;
        newTask.completed = false;
        tasks.push_back(newTask);
        std::cout << "Task added: " << description << std::endl;
    }

    void viewTasks() {
        if (tasks.empty()) {
            std::cout << "No tasks found." << std::endl;
        } else {
            std::cout << "Tasks:" << std::endl;
            for (size_t i = 0; i < tasks.size(); ++i) {
                std::cout << i + 1 << ". [" << (tasks[i].completed ? "X" : " ") << "] " << tasks[i].description << std::endl;
            }
        }
    }

    void markTaskAsCompleted(int index) {
        if (index < 1 || index > static_cast<int>(tasks.size())) {
            std::cout << "Invalid task index." << std::endl;
            return;
        }

        tasks[index - 1].completed = true;
        std::cout << "Marked task as completed: " << tasks[index - 1].description << std::endl;
    }

    void removeTask(int index) {
        if (index < 1 || index > static_cast<int>(tasks.size())) {
            std::cout << "Invalid task index." << std::endl;
            return;
        }

        std::cout << "Removed task: " << tasks[index - 1].description << std::endl;
        tasks.erase(tasks.begin() + index - 1);
    }
};

int main() {
    TodoList todoList;

    while (true) {
        std::cout << "Options:" << std::endl;
        std::cout << "1. Add Task" << std::endl;
        std::cout << "2. View Tasks" << std::endl;
        std::cout << "3. Mark Task as Completed" << std::endl;
        std::cout << "4. Remove Task" << std::endl;
        std::cout << "5. Exit" << std::endl;

        int choice;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::string description;
                std::cout << "Enter task description: ";
                std::cin.ignore();
                std::getline(std::cin, description);
                todoList.addTask(description);
                break;
            }
            case 2:
                todoList.viewTasks();
                break;
            case 3: {
                int index;
                std::cout << "Enter task index to mark as completed: ";
                std::cin >> index;
                todoList.markTaskAsCompleted(index);
                break;
            }
            case 4: {
                int index;
                std::cout << "Enter task index to remove: ";
                std::cin >> index;
                todoList.removeTask(index);
                break;
            }
            case 5:
                std::cout << "Exiting." << std::endl;
                return 0;
            default:
                std::cout << "Invalid choice." << std::endl;
        }

        std::cout << std::endl;
    }

    return 0;
}
